# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    tags:
      - "*"
env:
  PLUGIN_NAME: golang-image-upload-service
jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: build-linux
      run: |
        GOOS=linux GOARCH=amd64 go build ./main.go -o ./build/linux/image-api
        mkdir -p ./build/linux/configs
        mkdir -p ./build/linux/storage/logs
        mkdir -p ./build/linux/storage/uploads
        cp ./config/config.yaml ./build/linux/configs

    - name: build-windows
      run: |
        CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC="x86_64-w64-mingw32-gcc -fno-stack-protector -D_FORTIFY_SOURCE=0 -lssp" go build ./main.go -o ./build/windows/image-api.exe
        mkdir -p ./build/windows/configs
        mkdir -p ./build/windows/storage/logs
        mkdir -p ./build/windows/storage/uploads
        cp ./config/config.yaml ./build/windows/configs

    - name: build-macos
      run: |
        GOOS=darwin GOARCH=amd64 go build main.go -o ./build/macos/image-api
        mkdir -p ./build/macos/configs
        mkdir -p ./build/macos/storage/logs
        mkdir -p ./build/macos/storage/uploads
        cp ./config/config.yaml ./build/macos/configs

    - name: gzip-tar-all
      run: |
        tar -czvf ./build/image-api-windows.tar.gz -C ./build/windows/ .
        tar -czvf ./build/image-api-macos.tar.gz -C ./build/macos/ .
        tar -czvf ./build/image-api-linux.tar.gz -C ./build/linux/ .
        echo "::set-output name=tag_name::$(git tag --sort version:refname | tail -n 1)"
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Linux GZip file
      id: upload-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/image-api-linux.tar.gz
        asset_name: ${{ env.PLUGIN_NAME }}-linux-${{ steps.build.outputs.tag_name }}.zip
        asset_content_type: application/gzip
    - name: Upload Windows GZip file
      id: upload-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/image-api-windows.tar.gz
        asset_name: ${{ env.PLUGIN_NAME }}-windows-${{ steps.build.outputs.tag_name }}.zip
        asset_content_type: application/gzip

    - name: Upload MacOS GZip file
      id: upload-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/image-api-macos.tar.gz
        asset_name: ${{ env.PLUGIN_NAME }}-macos-${{ steps.build.outputs.tag_name }}.zip
        asset_content_type: application/gzip
